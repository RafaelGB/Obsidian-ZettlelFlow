{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ZettelFlow","text":"<p>Note: This Documentation is still a work in progress. If you have any questions, please feel free to open a issue or disccusion.</p> <p>ZettelFlow is a dynamic template engine based on Zettelkasten method. It is designed to minimize the friction between your thoughts and the final output. It is a tool that helps you to write and organize your thoughts.</p>"},{"location":"#our-canvas-example","title":"Our canvas example","text":"<p>To understand the concept of ZettelFLow, you can use the following configuration as an example: </p> <p>With the native Obsidian canvas, you can construct a workflow for your ideas. Use groups or edges to organize your thoughts. The plugin will use this canvas to generate a UI when you want to create a new note.</p>"},{"location":"#how-to-start","title":"How to start","text":"<ol> <li>Create a <code>.canvas</code> file where you want (A new folder for the next steps is recommended).</li> <li>Go to plugin configuration page and set the <code>.canvas</code> file path.</li> <li>Starts to create template files and add them to the <code>.canvas</code> file </li> <li>Convert your template files or embed notes into <code>steps</code> (See examples here) by right-clicking on the element and selecting <code>ZettelFlow: Convert to step/edit the step</code> (On mobile, long press on the file and select the option).</li> </ol>"},{"location":"#how-to-use","title":"How to use","text":"<p>The plugin offers a ribon Icon to open the note builder UI. (You can also configure a hotkey to open it.)</p> <p>The UI will show you the steps you can select to generate a new note.</p> <p>When you complete all the steps, the plugin will generate a new note with the content of the template files and merge their properties.</p> <p>Note: You can configure a shortcut to open the note builder UI.</p>"},{"location":"#how-it-works","title":"How it works","text":"<p>With your <code>.canvas</code> file, the plugin creates a workflow that will be used to generate new notes. The workflow is a directed graph where the nodes are the template files and the edges are the steps</p>"},{"location":"#interconnected-steps","title":"Interconnected steps","text":"<p>The steps are interconnected by: - Edges: The edges are the arrows between the steps in the canvas. With the direction of the arrow, you can configure the order of the steps. The plugin will use the edges to generate the UI. - Groups: The groups are the boxes in the canvas.You can anidate groups to create a hierarchy of steps (including another groups)</p>"},{"location":"#step-configuration","title":"Step configuration","text":"<p>The initial step will be a selection of all the nodes marked as <code>root</code>.</p>"},{"location":"#basic-configuration","title":"Basic configuration","text":"<ul> <li>Root toggle: If it's enabled, it will be shown as the first step in the UI.</li> <li>Target folder search: The folder where the new note will be created (the note builder will use the last step with this property informed).</li> <li>Optional toggle: If the step is an action, a Skip button will be shown in the UI when this option is enabled.</li> </ul>"},{"location":"#actions","title":"Actions","text":"<p>By default the steps starts with no actions. If you want to add one, there is a dropdown menu to select the action type and a button to add it.</p> <p>A step can have multiple actions, making the configuration more flexible. The order is not important fot the final note, but it will be the order shown in the UI of the note builder.</p>"},{"location":"#action-properties","title":"action properties","text":"<p>There are basic properties that all the actions have: - type: The action type. - description: The description of the action. It will be shown in the UI of the note builder and in the action step configuration.</p> <p>Depending on the action type, there are other properties that can be configured. See the action type documentation for more information.</p>"},{"location":"#action-types","title":"action types","text":"<p>They will be shown as a list of options to select from. The options are:</p> <ul> <li>Prompt: A simple input field to add a custom value to the built-in note template.</li> <li>Checkbox: A checkbox to select a boolean value. The value will be added to the note as a property.</li> <li>Number: A number input to save a number as a property in the built-in note template.</li> <li>Selector: A list of options to select from. The options are the values of the property defined in the file.</li> <li>DynamicSelector: A list of options to select from. The options are the values of the property defined in the file. The list will be updated when the property changes.</li> <li>Calendar: A calendar to select a date. The date will be added to the note as a property.</li> <li>Backlink: Insert the wikilink of the built-in note template in the heading note that you have configured.</li> <li>Tags: Add tags to the built-in note template as property.</li> <li>CssClasses: Add a css class to the built-in note template as property.</li> <li>TaskManagement: Rollover the not completed task given regex and folders.</li> <li>Script: Executes a JavaScript script when the workflow is run. Configure the script with the code editor displayed in the settings of the action.</li> </ul>"},{"location":"actions/Backlink/","title":"Backlink Action","text":"<p>Insert the backlink of the built-in note template into the note you have configured.</p>"},{"location":"actions/Backlink/#options","title":"Options","text":"<ul> <li>Pattern: The pattern to be used to insert the backlink. (Default: <code>[[{{title}}]]</code>)</li> <li>Enable default backlink. When enabled, the component will be disabled and the template will use the default values you have configured in the settings.</li> <li>Default file: Select the default file to be used.</li> <li>Default file heading: Select the default heading to be used.</li> </ul>"},{"location":"actions/Backlink/#component","title":"Component","text":"<p>The component is disabled by default. To enable it, you must set the <code>Enable default backlink</code> option to <code>false</code>.</p> <p>When you select the target file, the input of heading will be enabled with the possible headings of the file.</p> <p>The pattern will be <code>{{wikilink}}</code> by default. Once the file and heading are selected, a preview markdown will be shown with the pattern applied.</p> <p></p>"},{"location":"actions/Calendar/","title":"Calendar Action","text":"<p>Date picker to add a date to the built-in note template as property.</p>"},{"location":"actions/Calendar/#options","title":"Options","text":"<ul> <li>zone: The zone where the property will be added. (Frontmatter or Body)</li> <li>Key: The key of the property to be added.</li> <li>Label: An explanatory label for the property.</li> </ul>"},{"location":"actions/Calendar/#component","title":"Component","text":"<p>The component is a simple date picker. Select the date you want and press <code>confirm</code> to continue.</p> <p></p>"},{"location":"actions/Checkbox/","title":"Checkbox Action","text":"<p>Checkbox to select a boolean value. The value will be added to the note as a property.</p>"},{"location":"actions/Checkbox/#options","title":"Options","text":"<ul> <li>zone: The zone where the property will be added. (Frontmatter or Body)</li> <li>Key: The key of the property to be added.</li> <li>Label: An explanatory label for the property.</li> </ul>"},{"location":"actions/CssClasses/","title":"CssClasses Action","text":"<p>Obsidian offers a way to add custom styling to particular notes with the attribute <code>cssclasses</code>. This action allows you to add this attribute to a note dynamically or with static values.</p>"},{"location":"actions/CssClasses/#options","title":"Options","text":"<p>N/A</p>"},{"location":"actions/DynamicSelector/","title":"Dynamic Selector Action","text":"<p>The Dynamic Selector Component allows users to define selection elements whose options are generated on-the-fly based on user-provided JavaScript code. This means that instead of having static dropdown options, the options can change dynamically depending on various factors such as dataview queries, or other custom logic.</p>"},{"location":"actions/DynamicSelector/#key-features","title":"Key Features","text":"<ul> <li>Dynamic Option Generation: Create selection options dynamically using JavaScript.</li> <li>Contextual Configuration: Define different zones (frontmatter, body, context) where the selector interacts within your notes.</li> <li>Real-Time Debugging: Test and debug your scripts directly within the Obsidian settings interface.</li> </ul>"},{"location":"actions/DynamicSelector/#configuration","title":"Configuration","text":"<p>Configuring the Dynamic Selector Component involves defining scripts that generate the selection options and setting up the contextual zones where these selectors will operate.</p>"},{"location":"actions/DynamicSelector/#writing-the-script","title":"Writing the Script","text":"<p>To generate dynamic options, you'll need to write a JavaScript script that returns an array of string tuples. Each tuple represents a key-value pair for the selector options.</p>"},{"location":"actions/DynamicSelector/#script-example","title":"Script Example:","text":"<pre><code>const testFolders = app.vault.getAllFolders();\n// Add your filtering logic here\n// ...\nreturn testFolders.map(folder =&gt; [folder.path,folder.name]);\n</code></pre>"},{"location":"actions/DynamicSelector/#requirements","title":"Requirements:","text":"<ul> <li>Return Type: The script must return an array of arrays, where each inner array contains exactly two strings: the key and the display label.</li> <li>Format: <code>[string, string][]</code> \u2014 an array of string tuples. Example Script:</li> </ul> <pre><code>return [\n  [\"home\", \"Home\"],\n  [\"about\", \"About Us\"],\n  [\"contact\", \"Contact\"],\n];\n</code></pre>"},{"location":"actions/DynamicSelector/#setting-the-zone","title":"Setting the Zone","text":"<p>The Dynamic Selector Component operates within specific zones of your notes. These zones determine where and how the selector interacts with your content.</p>"},{"location":"actions/DynamicSelector/#available-zones","title":"Available Zones","text":"<ul> <li>Frontmatter: Interacts with the YAML frontmatter section of your notes.</li> <li>Body: Interacts with the main body content of your notes.</li> <li>Context: Utilizes a contextual key-value pair for more advanced interactions.</li> </ul>"},{"location":"actions/DynamicSelector/#configuring-the-zone","title":"Configuring the Zone","text":"<ul> <li>Navigate to the Dynamic Selector Settings within your Obsidian plugin settings.</li> <li>Locate the Zone Selection dropdown.</li> <li>Choose one of the available zones (frontmatter, body, context) based on where you want the selector to operate.</li> </ul>"},{"location":"actions/Number/","title":"Number action","text":"<p>Include a number input to save a number as a property in the built-in note template.</p>"},{"location":"actions/Number/#options","title":"Options","text":"<ul> <li>zone: The zone where the property will be added. (Frontmatter or Body)</li> <li>Key: The key of the property to be added.</li> <li>Label: An explanatory label for the property.</li> <li>Placeholder: A placeholder as a hint for the user (yourself).</li> </ul>"},{"location":"actions/Prompt/","title":"Prompt Action","text":"<p>Include a textarea to save text as a property in the built-in note template.</p>"},{"location":"actions/Prompt/#options","title":"Options","text":"<ul> <li>zone: The zone where the property will be added. (Frontmatter or Body)</li> <li>Key: The key of the property to be added.</li> <li>Label: An explanatory label for the property.</li> <li>Placeholder: A placeholder as a hint for the user (yourself).</li> </ul>"},{"location":"actions/Prompt/#component","title":"Component","text":"<p>The component is a simple input field with a label and a placeholder. Write the value you want and press <code>enter</code> to continue.</p> <p></p>"},{"location":"actions/Script/","title":"Script action","text":"<p>Executes a JavaScript script when the workflow is run. Configure the script with the code editor displayed in the settings of the action. </p>"},{"location":"actions/Script/#available-variables","title":"Available variables","text":""},{"location":"actions/Script/#note","title":"<code>note</code>","text":"<p>Functionalities related with the file of the note.</p>"},{"location":"actions/Script/#functions","title":"Functions","text":"<ul> <li><code>setTitle(title: string)</code>: void =&gt; Sets the title of the note.</li> <li><code>getTitle()</code>: string =&gt; Returns the title of the note.</li> <li><code>setTargetFolder(folder: string)</code>: void =&gt; Sets the target folder of the note.</li> <li><code>getTargetFolder()</code>: string =&gt; Returns the target folder of the note.</li> </ul>"},{"location":"actions/Script/#content","title":"<code>content</code>","text":"<p>Functionalities related with the content of the note.</p> <p>Example:</p> <pre><code>content.add(\"Hello world!\");\n</code></pre>"},{"location":"actions/Script/#functions_1","title":"Functions","text":"<ul> <li><code>add(content: string)</code>: void =&gt; Add new content to the note.</li> <li><code>get()</code>: string =&gt; get the content of the note.</li> <li><code>modify(key: string, result: string)</code>: void =&gt; Substitute a substring of the content with the result.</li> <li><code>addTag(tag: string)</code>: void =&gt; add a tag to the note (frontmatter).</li> <li><code>addTags(tags: string[])</code>: void =&gt; add tags to the note (frontmatter).</li> <li><code>getTags()</code>: string[] =&gt; get the tags of the note (frontmatter).</li> <li><code>addFrontMatter(frontmatter: Record&lt;string, Literal&gt;)</code>: void =&gt; add properties to the frontmatter.</li> <li><code>getFrontMatter()</code>: Record =&gt; get the frontmatter of the note."},{"location":"actions/Script/#zf","title":"<code>zf</code>","text":"<p>Functionalities offered by the plugin itself.</p>"},{"location":"actions/Script/#internal-zfinternal","title":"Internal (<code>zf.internal</code>)","text":"<p>Native functionalities of the plugin.</p>"},{"location":"actions/Script/#vault-zfinternalvault","title":"Vault (<code>zf.internal.vault</code>)","text":"<p>Functionalities related with the management of the vault. - <code>resolveTFolder(folder: string)</code>: TFolder =&gt; Resolves the target folder of the note given the path. If the folder is not defined, it returns the root folder of the vault. - <code>obtainFilesFrom(folder: TFolder, extensions: string[])</code>: TFile[] =&gt; Returns the files of the given folder filtered by the extensions. If the extensions are not defined, it will filter by markdown and canvas files (<code>[\"md\", \"canvas\"]</code>)</p>"},{"location":"actions/Script/#integrations-zfexternal","title":"Integrations (<code>zf.external</code>)","text":"<p>Some plugins offer their own API to interact with them. The following integrations are available: - Dataview: <code>zf.external.dv</code> Plugin with powerful query functionalities. Example:</p> <pre><code>const {dv} = zf.external;\nconst result = dv.pages().where(p =&gt; p.file.name === \"My note\").select(p =&gt; p.file.name);\n</code></pre> <ul> <li>Templater <code>zf.external.tp</code> Plugin that allows to create templates with JavaScript. <p> This integration only supports the functions that are available in the script user functions.</p> </li> </ul> <p>Example:</p> <pre><code>const {tp} = zf.external;\n// Create a script called \"myScript\" in the folder defined in the settings of the Templater plugin.\nconst result = tp.user.myScript();\n</code></pre>"},{"location":"actions/Script/#context","title":"<code>context</code>","text":"<p>An empty object that can be used to store data between script execution steps.</p> <p>Example:</p> <pre><code>context.myVariable = \"Hello world!\";\n</code></pre>"},{"location":"actions/Script/#app","title":"<code>app</code>","text":"<p>Obsidian API functionalities. See the official documentation.</p> <p>Example:</p> <pre><code>app.vault.getMarkdownFiles();\n</code></pre>"},{"location":"actions/Script/#component","title":"Component","text":"<p>The scripts does not have a component. It is executed in the background but it can interact with the UI of another step components using the <code>context</code> variable.</p> <p>The <code>context</code> variable is an empty object that can be used to store data between script execution steps. It can be used to include the result of other UI like the <code>Prompt</code> step.</p>"},{"location":"actions/Selector/","title":"Selector Action","text":"<p>Create some options to select one of them and add it into the built-in note template as property.</p>"},{"location":"actions/Selector/#options","title":"Options","text":"<ul> <li>zone: The zone where the property will be added. (Frontmatter or Body)</li> <li>Key: The key of the property to be added.</li> <li>Label: An explanatory label for the property.</li> <li>Options: The options to select one of them.</li> <li>Value: the value that will be inserted into the property.</li> <li>Description: An explanatory description for the option.</li> </ul>"},{"location":"actions/Selector/#component","title":"Component","text":"<p>The component is a dropdown with the options you have defined. Select one of them and press <code>Confirm</code> to continue.</p> <p></p>"},{"location":"actions/Tags/","title":"Tags Action","text":"<p>Add tags to the built-in note template as property (will be merged with existing tags of another tag steps or tags in the frontmatter).</p>"},{"location":"actions/Tags/#options","title":"Options","text":"<p>N/A</p>"},{"location":"actions/Tags/#component","title":"Component","text":"<p>Multi-select component to add tags to the built-in note template as property. </p>"},{"location":"actions/TaskManagement/","title":"Task Management Action","text":"<p>Manage the rollover of tasks given the next properties:</p> <ul> <li>Regex: The regex to find the tasks in the notes.</li> <li>Folder: The folder where the notes will be searched.</li> <li>Prefix: The prefix to add to the task when it's rollovered.</li> <li>Suffix: The suffix to add to the task when it's rollovered.</li> </ul>"},{"location":"folder-flows/FolderFlowsIntro/","title":"ZettelFlow Plugin Documentation","text":""},{"location":"folder-flows/FolderFlowsIntro/#introduction-to-folder-level-automated-flows","title":"Introduction to Folder-Level Automated Flows","text":""},{"location":"folder-flows/FolderFlowsIntro/#overview","title":"Overview","text":"<p>The ZettelFlow plugin supports a powerful feature: Folder-Level Automated Flows. This feature allows you to assign specific workflows to individual folders. Whenever a file is created in one of these configured folders, an automatic modal will trigger, guiding you through the workflow you have set up for that folder.</p>"},{"location":"folder-flows/FolderFlowsIntro/#key-benefits","title":"Key Benefits","text":"<ul> <li>Automation: Streamline your note-taking process by automating repetitive tasks.</li> <li>Consistency: Ensure that all files created in a specific folder follow the same process, enhancing organization and standardization.</li> <li>Ease of Use: Activate workflows without needing to manually trigger them, improving efficiency and user experience.</li> </ul>"},{"location":"folder-flows/FolderFlowsIntro/#how-it-works","title":"How It Works","text":"<ol> <li>Assigning a Workflow to a Folder:</li> <li>Right-click on the folder you want to assign a workflow to.</li> <li>Select the option to configure the workflow for that folder.</li> <li>This action will create a canvas file in a configurable path (default: <code>_ZettelFlow</code>).</li> <li> <p>The filename will be the path of the folder with slashes (<code>/</code>) replaced by underscores (<code>_</code>).</p> </li> <li> <p>Configuration File:</p> </li> <li>The created canvas file will store the workflow configuration for the folder.</li> <li> <p>You can adjust the configuration by editing this canvas file as needed.</p> </li> <li> <p>Automatic Modal Activation:</p> </li> <li>Whenever a new file is created in a folder that has an assigned configuration, the associated workflow modal will automatically appear.</li> <li>This ensures that every file created in this folder follows the specified workflow, regardless of the creation method (e.g., directly in Obsidian, through a synced service, etc.).</li> </ol>"},{"location":"folder-flows/FolderFlowsIntro/#example-use-case","title":"Example Use Case","text":"<p>Consider you have a folder named <code>Profiles</code>. You can configure a workflow for this folder to collect essential information such as email, team, and name whenever a new profile document is created. </p>"},{"location":"folder-flows/FolderFlowsIntro/#steps-to-configure","title":"Steps to Configure:","text":"<ol> <li>Open ZettelFlow Settings:</li> <li> <p>Go to the ZettelFlow plugin settings in Obsidian.</p> </li> <li> <p>Assign Workflow:</p> </li> <li>Select the <code>Profiles</code> folder.</li> <li> <p>Assign the desired workflow (e.g., Profile Creation Workflow).</p> </li> <li> <p>Create a File:</p> </li> <li>Create a new file in the <code>Profiles</code> folder.</li> <li>Watch as the Profile Creation Workflow modal appears, prompting you to fill out the necessary details like email, team, and name.</li> </ol>"},{"location":"folder-flows/FolderFlowsIntro/#example-use-case_1","title":"Example Use Case","text":"<p>Consider you have a folder named <code>Profiles</code>. You can configure a workflow for this folder to collect essential information such as email, team, and name whenever a new profile document is created.</p>"},{"location":"folder-flows/FolderFlowsIntro/#steps-to-configure_1","title":"Steps to Configure:","text":"<ol> <li>Open ZettelFlow Settings:</li> <li> <p>Go to the ZettelFlow plugin settings in Obsidian.</p> </li> <li> <p>Assign Workflow:</p> </li> <li>Right-click on the <code>Profiles</code> folder.</li> <li>Select the configuration option to assign the Profile Creation Workflow.</li> <li> <p>This will create a file named <code>_ZettelFlow/Profiles.canvas</code>.</p> </li> <li> <p>Create a File:</p> </li> <li>Create a new file in the <code>Profiles</code> folder.</li> <li>Watch as the Profile Creation Workflow modal appears, prompting you to fill out the necessary details like email, team, and name.</li> </ol>"},{"location":"folder-flows/FolderFlowsIntro/#configuration-details","title":"Configuration Details","text":"<p>To set up Folder-Level Automated Flows, follow these detailed steps:</p> <ol> <li>Access Plugin Settings:</li> <li> <p>Go to <code>Settings</code> &gt; <code>Community Plugins</code> &gt; <code>ZettelFlow</code>.</p> </li> <li> <p>Select Folder:</p> </li> <li> <p>Right-click on the folder you want to configure and choose the option to configure the workflow.</p> </li> <li> <p>Assign Workflow:</p> </li> <li>The system will create a configuration file in the default path (<code>_ZettelFlow</code>) with the folder's path name.</li> <li> <p>Adjust the workflow configuration in this file as needed.</p> </li> <li> <p>Save Settings:</p> </li> <li>Ensure you save your settings to apply the changes.</li> </ol>"},{"location":"folder-flows/FolderFlowsIntro/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Modal Not Appearing: Ensure that the folder is correctly configured in the ZettelFlow settings and the configuration file exists in the <code>_ZettelFlow</code> directory (or the custom path you have set).</li> <li>Workflow Not Triggering: Check if the workflow is active and correctly assigned to the folder by reviewing the canvas file.</li> </ul> <p>If the note was create with the Ribbon button inside one of the folders with a workflow, the modal will not appear. This is a expected behavior to avoid the modal to appear twice for the same note.</p>"},{"location":"how-to-contribute/Wiki/","title":"Documentation","text":"<p>We use MkDocs to generate our documentation. MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.</p>"},{"location":"how-to-contribute/Wiki/#installation","title":"Installation","text":"<ul> <li>Install Python and pip.</li> <li>Install the MkDocs package using pip: <code>pip install mkdocs</code></li> <li>Install the Material for MkDocs theme using pip: <code>pip install mkdocs-material</code></li> </ul>"},{"location":"how-to-contribute/Wiki/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"how-to-contribute/Wiki/#deploy","title":"Deploy","text":"<p>Once the documentation is ready, you can create a pull request to the <code>develop</code> branch. Once the PR is merged, the documentation will be automatically deployed to GitHub Pages by a GitHub Action when the <code>develop</code> branch is merged to <code>main</code>.</p>"}]}